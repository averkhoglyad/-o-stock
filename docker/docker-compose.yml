version: "3.9"
services:
  database:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "ostock_dev"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  config-server:
    image: ostock/config-server:1.0-SNAPSHOT
    ports:
      - "9999:9999"
    environment:
      SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME: user
      SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD: pass
    networks:
      backend:
        aliases:
          - "config-server"

  discovery-server:
    image: ostock/discovery-server:1.0-SNAPSHOT
    ports:
      - "8000:8000"
    command: "--spring.config.import=configserver:http://config-server:9999"
    environment:
      SPRING_PROFILES_ACTIVE: dev
    restart: on-failure
    depends_on:
      config-server:
        condition: service_started
    networks:
      backend:
        aliases:
          - "discovery-server"

  licensing:
    image: ostock/licensing-service:1.0-SNAPSHOT
    ports:
      - "8080:8080"
    command: "--spring.config.import=configserver:http://config-server:9999"
    environment:
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
      discovery-server:
        condition: service_started
    networks:
      - backend

  organization:
    image: ostock/organization-service:1.0-SNAPSHOT
    ports:
      - "8090:8090"
    command: "--spring.config.import=configserver:http://config-server:9999"
    environment:
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
      discovery-server:
        condition: service_started
    networks:
      - backend

networks:
  backend:
    driver: bridge