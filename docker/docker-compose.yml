version: '3.9'
services:
  database:
    image: postgres:latest
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'ostock_dev'
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - 'database'
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - '16379:6379'
    networks:
      backend:
        aliases:
          - 'redis'

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - '12181:2181'
    networks:
      backend:
        aliases:
          - 'zookeeper'
  kafkaserver:
    image: wurstmeister/kafka:latest
    ports:
      - '9092:9092'
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=localhost
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=orgChangeTopic:1:1
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - 'kafka'

  config-server:
    image: ostock/config-server:1.0-SNAPSHOT
    ports:
      - '9999:9999'
    environment:
      SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME: user
      SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD: pass
    networks:
      backend:
        aliases:
          - 'config-server'

  discovery-server:
    image: ostock/discovery-server:1.0-SNAPSHOT
    ports:
      - '8000:8000'
    command: '--spring.config.import=configserver:http://config-server:9999'
    environment:
      SPRING_PROFILES_ACTIVE: dev
    restart: on-failure
    depends_on:
      config-server:
        condition: service_started
    networks:
      backend:
        aliases:
          - 'discovery-server'

  licensing:
    image: ostock/licensing-service:1.0-SNAPSHOT
    ports:
      - '8080:8080'
    command: '--spring.config.import=configserver:http://config-server:9999'
    environment:
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
      discovery-server:
        condition: service_started
    networks:
      - backend

  organization:
    image: ostock/organization-service:1.0-SNAPSHOT
    ports:
      - '8090:8090'
    command: '--spring.config.import=configserver:http://config-server:9999'
    environment:
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      database:
        condition: service_healthy
      config-server:
        condition: service_started
      discovery-server:
        condition: service_started
    networks:
      - backend

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.3
#    restart: always
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    volumes:
      - ./ostock-realm.json:/opt/keycloak/data/import/realm.json
    command:
      - start-dev
      - --import-realm
    ports:
      - '9090:8080'
    networks:
      backend:
        aliases:
          - 'keycloak'

  logstash:
    image: docker.elastic.co/logstash/logstash:8.6.1
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./logstash.conf:/etc/logstash/conf.d/logstash.conf
    ports:
      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.1
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.1
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"

networks:
  backend:
    driver: bridge
